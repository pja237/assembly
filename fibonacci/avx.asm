; COMPILE:
; nasm -g -f elf64 geteuid.asm  
; gcc -o geteuid.out geteuid.o

BITS 64
section .text
    ;global main
    global _start
    extern printf

;main:
_start:

    vzeroall

    ;vbroadcasti128 ymm0, [y]
    ;vbroadcasti128 ymm1, [z]
    ;vbroadcasti128 ymm2, [q]
    vinserti128 ymm0, ymm1, [q], 0
; ymm0 { v8_float = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, v4_double = {0x0, 0x0, 0x0, 0x0}, 
; v32_int8 = {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x0 <repeats 16 times>}, 
; v16_int16 = {0x1010, 0x1010, 0x1010, 0x1010, 0x2020, 0x2020, 0x2020, 0x2020, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}, 
; v8_int32 = {0x10101010, 0x10101010, 0x20202020, 0x20202020, 0x0, 0x0, 0x0, 0x0}, 
; v4_int64 = {0x1010101010101010, 0x2020202020202020, 0x0, 0x0}, 
; v2_int128 = {0x20202020202020201010101010101010, 0x00000000000000000000000000000000}}



    mov rax,60 ; exit(int status)
    ; User-level applications use as integer registers for passing the sequence %rdi, %rsi, %rdx, %rcx, %r8 and %r9. 
    ; The kernel interface uses %rdi, %rsi, %rdx, %r10, %r8 and %r9.
    mov rdi,0 ; int status
    syscall


section .data
x: db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 8 x 0-bytes
y: db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00  ; 16 x 0-bytes
z: db 0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02  ; 16 x mix-bytes
q: db 0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20  ; 16 x mix-bytes
